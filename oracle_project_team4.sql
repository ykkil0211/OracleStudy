SELECT USER
FROM DUAL;

-- 전체 관리자 테이블 
CREATE TABLE ADMIN_AUTHORITY
( AUTHO_NUM     NUMBER(2) 
, AUTHO_NAME    VARCHAR2(20)
, CONSTRAINT AUTHO_NUM_PK PRIMARY KEY(AUTHO_NUM)
);
-- Table ADMIN_AUTHORITY이(가) 생성되었습니다.
DESC ADMIN_AUTHORITY;
/*
이름         널?       유형           
---------- -------- ------------ 
AUTHO_NUM  NOT NULL NUMBER(2)    
AUTHO_NAME          VARCHAR2(20) 
*/

--관리자 테이블 
CREATE TABLE ADMINS
( ADMIN_ID  VARCHAR2(20)
, AUTHO_NUM NUMBER(2)   CONSTRAINT AUTHO_NUM_NN NOT NULL
, ADM_NAME  VARCHAR2(20)
, ADMIN_PW  VARCHAR2(16) CONSTRAINT ADMIN_PW_NN NOT NULL
, REG_DATE  DATE DEFAULT SYSDATE
, CONSTRAINT ADMIN_ID_PK PRIMARY KEY(ADMIN_ID)
, CONSTRAINT AUTHO_NUM_FK FOREIGN KEY(AUTHO_NUM)
                REFERENCES ADMIN_AUTHORITY(AUTHO_NUM)        
);
-- Table ADMIN이(가) 생성되었습니다.

DESC ADMINS;
/*
이름        널?       유형           
--------- -------- ------------ 
ADMIN_ID  NOT NULL VARCHAR2(20) 
AUTHO_NUM NOT NULL NUMBER(2)    
ADM_NAME           VARCHAR2(20) 
ADMIN_PW  NOT NULL VARCHAR2(16) 
REG_DATE           DATE          
*/

--과목 테이블 
CREATE TABLE SUBJECTS
( SUB_CODE  VARCHAR2(20)
, SUB_NAME  VARCHAR2(40)
, CONSTRAINT SUB_CODE_PK PRIMARY KEY(SUB_CODE)
);
-- Table SUBJECT이(가) 생성되었습니다.

DESC SUBJECTS;
/*
이름       널?       유형           
-------- -------- ------------ 
SUB_CODE NOT NULL VARCHAR2(20) 
SUB_NAME          VARCHAR2(40)
*/

-- 책 테이블 
CREATE TABLE BOOKS
( BOOK_CODE     VARCHAR2(20)
, BOOK_NAME     VARCHAR2(40)
, CONSTRAINT BOOK_CODE_PK PRIMARY KEY(BOOK_CODE)
);
-- Table BOOK이(가) 생성되었습니다.

DESC BOOKS;
/*
이름        널?       유형           
--------- -------- ------------ 
BOOK_CODE NOT NULL VARCHAR2(20) 
BOOK_NAME          VARCHAR2(40) 
*/

SELECT *
FROM ALL_CONSTRAINTS
WHERE TABLE_NAME = 'ADMIN_AUTHORITY';

SELECT *
FROM ALL_CONSTRAINTS
WHERE TABLE_NAME = 'ADMINS';

SELECT *
FROM ALL_CONSTRAINTS
WHERE TABLE_NAME = 'SUBJECTS';

SELECT *
FROM ALL_CONSTRAINTS
WHERE TABLE_NAME = 'BOOKS';

ALTER TABLE ADMIN
ADD CONSTRAINT ADMIN_PW_CK CHECK (LENGTH(ADMIN_PW) >= 7);

-------------------------------------------------------------------------------

-- 관리자에서 교수 테이블 조회 
SELECT B.PRO_ID, B.PRO_NAME, B.PRO_REG_DATE,B.PRO_SSN
FROM ADMINS A JOIN PROFESSORS B
ON A.ADMIN_PW = B.PRO_PW;

SELECT *
FROM PROFESSORS;

-- 관리자가 교수 테이블 삽입 
INSERT INTO PROFESSORS (PRO_ID, PRO_SSN, PRO_NAME, PRO_PW, PRO_DATE)
VALUES(블라블라블라);

-- 관리자가 교수 테이블 정보 수정 
UPDATE PROFESSORS
SET PRO_ID = '필요한 내용'
WHERE PRO_ID = '뭐시기';

-- 교수 정보 삭제 
DELETE 
FROM PROFESSORS
WHERE PRO_ID = '삭제할 번호';

-- 출력정보? 교수자 계정, 과정, 과목, 학생, 성적 관리 
SELECT P.PRO_ID "교수ID",P.PRO_NAME "교수이름",C.COU_NAME "과정이름", S.SUB_NAME "과목명",ST.STU_ID "학생ID",
       ST.STU_NAME"학생이름",E.NOTE_SCORE "필기성적",
       E.SKILL_SCORE "실기성적", E.ATT_SCORE "출결성적"
FROM PROFESSORS P JOIN OPENING_SUBJECTS O
ON P.PRO_ID = O.PRO_ID
JOIN SUBJECTS S
ON S.SUB_CODE = O.SUB_CODE
JOIN SCORE E
ON E.OPEN_SUB_CODE = O.OPEN_SUB_CODE
JOIN OPENING_COURSES OC
ON OC.OPEN_COU_CODE = O.OPEN_COU_CODE
JOIN COURSES C
ON C.COU_CODE = OC.COU_CODE
JOIN COURSE_APPLICATION CA
ON CA.OPEN_COU_CODE = OC.COU_CODE
JOIN STUDENTS ST
ON ST.STU_ID = CA.STU_ID;

INSERT INTO SUBJECTS(SUB_CODE, SUB_NAME) 
VALUES('S0001','수학');
INSERT INTO SUBJECTS(SUB_CODE, SUB_NAME) 
VALUES('S0002','영어');

SELECT *
FROM SUBJECTS;

INSERT INTO BOOKS(BOOK_CODE, BOOK_NAME)
VALUES('B0001','수학책');

INSERT INTO BOOKS(BOOK_CODE, BOOK_NAME)
VALUES('B0002','영어책');

SELECT *
FROM BOOKS;

COMMIT;
-- 커밋 완료. *2

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0001',20,30,50,'OS0001',1);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0002',20,30,50,'OS0002',2);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0003',30,20,50,'OS0001',2);

SELECT *
FROM OPENING_SUBJECTS;

SELECT *
FROM SCORE;

SELECT *
FROM opening_courses;

SELECT *
FROM opening_subjects;

SELECT *
FROM RETIRE_OUT_STUDENTS;

SELECT *
FROM professors;

SELECT *
FROM BOOKS;

SELECT *
FROM ROOMS;

SELECT *
FROM STUDENTS;

COMMIT;

CREATE OR REPLACE VIEW VIEW_ADMINS
AS
SELECT P.PRO_NAME "교수이름",S.SUB_NAME "과목이름",OS.SUB_START_DATE || ' ~ ' || OS.SUB_END_DATE "과목기간",B.BOOK_NAME"교재"
     , R.ROOM_NAME "강의실", CASE WHEN OS.SUB_START_DATE <= SYSDATE AND OS.SUB_END_DATE >= SYSDATE THEN '강의중'
                         WHEN OS.SUB_END_DATE <= SYSDATE THEN '강의종료'
                    ELSE '강의예정' 
                    END "강의여부"
FROM PROFESSORS P JOIN opening_subjects OS
ON P.PRO_ID = OS.PRO_ID
JOIN SUBJECTS S
ON S.SUB_CODE = OS.SUB_CODE
JOIN SCORE E
ON E.OPEN_SUB_CODE = OS.OPEN_SUB_CODE
JOIN OPENING_COURSES OC
ON OC.OPEN_COU_CODE = OS.OPEN_COU_CODE
JOIN COURSES C
ON C.COU_CODE = OC.COU_CODE
JOIN ROOMS R
ON R.ROOM_CODE = OC.ROOM_CODE
JOIN BOOKS B
ON B.BOOK_CODE = OS.BOOK_CODE;
-- View VIEW_ADMINS이(가) 생성되었습니다.

SELECT *
FROM VIEW_ADMINS;

-- ○ 개설 과목 테이블 생성 (OPENING_SUBJECT)

CREATE TABLE OPENING_SUBJECTS
( OPEN_SUB_CODE     VARCHAR2(20)    CONSTRAINT OPEN_SUB_CODE_PK PRIMARY KEY
, PRO_ID            VARCHAR2(20)    CONSTRAINT PRO_ID_NN NOT NULL
, BOOK_CODE         VARCHAR2(20)    CONSTRAINT BOOK_CODE_NN NOT NULL
, SUB_START_DATE    DATE
, SUB_END_DATE      DATE
, NOTE_RATIO        NUMBER(3)       CONSTRAINT NOTE_RATIO_CK 
                                               CHECK(NOTE_RATIO BETWEEN 0 AND 100)
, SKILL_RATIO       NUMBER(3)       CONSTRAINT SKILL_RATIO_CK
                                               CHECK(SKILL_RATIO BETWEEN 0 AND 100)
, ATT_RATIO         NUMBER(3)       CONSTRAINT ATT_RATIO_CK
                                    CHECK(ATT_RATIO BETWEEN 0 AND 100)

, SUB_DESC          VARCHAR2(100)
, SUB_CODE          VARCHAR2(20)    CONSTRAINT SUB_CODE_NN NOT NULL
, OPEN_COU_CODE     VARCHAR2(20)    CONSTRAINT OPEN_COU_CODE_NN NOT NULL
);

DESC OPENING_SUBJECTS;

ALTER TABLE OPENING_SUBJECTS DROP CONSTRAINT PRO_ID_NN;

ALTER TABLE OPENING_SUBJECTS 
ADD CONSTRAINT PRO_ID_FK FOREIGN KEY (PRO_ID) REFERENCES PROFESSORS(PRO_ID)
                                      ON DELETE CASCADE;
                                      
-------------------------------------------------------------------------------------------
DROP TABLE OPENING_SUBJECT PURGE;

DROP TABLE SCORE PURGE;

CREATE TABLE OPENING_SUBJECTS
( OPEN_SUB_CODE     VARCHAR2(20)    CONSTRAINT OPEN_SUB_CODE_PK PRIMARY KEY
, PRO_ID            VARCHAR2(20)    CONSTRAINT PRO_ID_NN NOT NULL
, BOOK_CODE         VARCHAR2(20)    CONSTRAINT BOOK_CODE_NN NOT NULL
, SUB_START_DATE    DATE
, SUB_END_DATE      DATE
, NOTE_RATIO        NUMBER(3)       CONSTRAINT NOTE_RATIO_CK 
                                               CHECK(NOTE_RATIO BETWEEN 0 AND 100)
, SKILL_RATIO       NUMBER(3)       CONSTRAINT SKILL_RATIO_CK
                                               CHECK(SKILL_RATIO BETWEEN 0 AND 100)
, ATT_RATIO         NUMBER(3)       CONSTRAINT ATT_RATIO_CK
                                               CHECK(ATT_RATIO BETWEEN 0 AND 100)

, SUB_DESC          VARCHAR2(100)
, SUB_CODE          VARCHAR2(20)    CONSTRAINT SUB_CODE_NN NOT NULL
, OPEN_COU_CODE     VARCHAR2(20)    CONSTRAINT OPEN_COU_CODE_NN NOT NULL
);

--Table OPENING_SUBJECTS이(가) 생성되었습니다.

ALTER TABLE OPENING_SUBJECTS
ADD (   CONSTRAINT OPS_PRO_ID_FK FOREIGN KEY (PRO_ID)
                   REFERENCES PROFESSORS(PRO_ID) ON DELETE CASCADE
      , CONSTRAINT OPS_BOOK_CODE_FK FOREIGN KEY (BOOK_CODE)
                   REFERENCES BOOKS(BOOK_CODE)
      , CONSTRAINT OPS_SUB_CODE_FK FOREIGN KEY (SUB_CODE)
                   REFERENCES SUBJECTS(SUB_CODE) ON DELETE CASCADE
      , CONSTRAINT OPS_OPEN_COU_CODE FOREIGN KEY (OPEN_COU_CODE)
                   REFERENCES OPENING_COURSES(OPEN_COU_CODE) ON DELETE CASCADE
    );
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.

CREATE TABLE SCORE
( SCORE_CODE    VARCHAR2(20)    CONSTRAINT SCORE_CODE_PK PRIMARY KEY
, NOTE_SCORE    NUMBER(3)       
, SKILL_SCORE   NUMBER(3)
, ATT_SCORE     NUMBER(3)
, OPEN_SUB_CODE VARCHAR2(20)    CONSTRAINT SC_OPEN_SUB_CODE_NN NOT NULL
, COU_APP_NUM   NUMBER          CONSTRAINT SC_COU_APP_NUM_NN NOT NULL
);
-- Table SCORE이(가) 생성되었습니다.

ALTER TABLE SCORE
ADD (  CONSTRAINT SC_OPEN_SUB_CODE_FK FOREIGN KEY(OPEN_SUB_CODE)
                 REFERENCES OPENING_SUBJECTS(OPEN_SUB_CODE) ON DELETE CASCADE
     , CONSTRAINT SC_COU_APP_NUM_FK FOREIGN KEY(COU_APP_NUM)
                 REFERENCES COURSE_APPLICATION(COU_APP_NUM) ON DELETE CASCADE
);
-- Table SCORE이(가) 변경되었습니다.

--------------------------------------------------------------------------------

SELECT *
FROM OPENING_SUBJECTS;

SELECT *
FROM SCORE;

SELECT *
FROM SUBJECTS;
-- SOOO1

SELECT *
FROM COURSES;

SELECT *
FROM STUDENTS;

SELECT *
FROM PROFESSORS;

SELECT *
FROM OPENING_COURSES;

SELECT *
FROM COURSES;
-- COO1

SELECT *
FROM ROOMS;

SELECT *
FROM course_application;

SELECT *
FROM SCORE;

INSERT INTO SCORE(SCORE_CODE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0001','OS0003',1);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0002',65,15,20,'OS0003',2);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0003',30,30,40,'OS0003',3);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0004',20,20,60,'OS0003',4);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0005',40,20,20,'OS0003',5);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0006',70,15,15,'OS0003',6);

INSERT INTO SCORE(SCORE_CODE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0007','OS0001',7);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0008',40,20,20,'OS0001',8);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0009',60,15,35,'OS0001',9);

INSERT INTO SCORE(SCORE_CODE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0010','OS0002',10);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0011',35,25,30,'OS0002',11);

INSERT INTO SCORE(SCORE_CODE, NOTE_SCORE, SKILL_SCORE, ATT_SCORE, OPEN_SUB_CODE, COU_APP_NUM)
VALUES('SC0012',90,5,5,'OS0002',12);
-- 1 행 이(가) 삽입되었습니다.

COMMIT;
-- 커밋 완료.

SELECT *
FROM subjects;


SELECT *
FROM ALL_CONSTRAINTS
WHERE TABLE_NAME = 'OPENING_SUBJECTS';

ALTER TABLE OPENING_SUBJECTS DROP CONSTRAINT OPS_PRO_ID_FK;
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.


ALTER TABLE OPENING_SUBJECTS
ADD CONSTRAINT OPS_PRO_ID_FK FOREIGN KEY (PRO_ID)
            REFERENCES PROFESSORS (PRO_ID);
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.

--------------------------------------------------------------------------------

ALTER TABLE OPENING_SUBJECTS DROP CONSTRAINT OPS_SUB_CODE_FK;
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.


ALTER TABLE OPENING_SUBJECTS
ADD CONSTRAINT OPS_SUB_CODE_FK FOREIGN KEY (SUB_CODE)
            REFERENCES SUBJECTS (SUB_CODE);
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.

--------------------------------------------------------------------------------

ALTER TABLE OPENING_SUBJECTS DROP CONSTRAINT OPS_OPEN_COU_CODE;
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.


ALTER TABLE OPENING_SUBJECTS
ADD CONSTRAINT OPS_OPEN_COU_CODE FOREIGN KEY (OPEN_COU_CODE)
            REFERENCES OPENING_COURSES (OPEN_COU_CODE);
-- Table OPENING_SUBJECTS이(가) 변경되었습니다.
                       
SELECT *
FROM OPENING_COURSES;

--------------------------------------------------------------------------------
SELECT '수강생' "분류"
      , STU.STU_NAME
      , CA.*
FROM COURSE_APPLICATION CA
     INNER JOIN
     STUDENTS STU
     ON CA.STU_ID = STU.STU_ID
WHERE CA.COU_APP_NUM NOT IN
(
    SELECT COU_APP_NUM
    FROM RETIRE_OUT_STUDENTS
)
UNION ALL
SELECT '중도탈락자' "분류"
     , STU.STU_NAME
     , CA.*
FROM RETIRE_OUT_STUDENTS ROS
     INNER JOIN
     COURSE_APPLICATION CA
     ON ROS.COU_APP_NUM = CA.COU_APP_NUM
     INNER JOIN
     STUDENTS STU
     ON STU.STU_ID = CA.STU_ID;

SELECT *
FROM RETIRE_OUT_STUDENTS;

SELECT *
FROM retire_out_reason;

--------------------------------------------------------------------------------

-- 관리자 테이블 생성
CREATE TABLE PROFESSORS_LOG
( PRO_NAME  VARCHAR2(20)
, MEMO  VARCHAR2(200)
, LOG_DATE  DATE DEFAULT SYSDATE
);
-- 테이블 생성 완료 

SELECT *
FROM PROFESSORS;

SELECT *
FROM SCORE;

SELECT *
FROM PROFESSORS_LOG;

SELECT *
FROM opening_SUBJECTS;

INSERT INTO PROFESSORS(PRO_ID, PRO_SSN, PRO_NAME, PRO_PW)
VALUES('PRO1','111111-1234567','이주형','1234567');


UPDATE PROFESSORS
SET PRO_ID = 'PRO1'
WHERE PRO_ID = 'PRO4';

SELECT *
FROM PROFESSORS;


DELETE
FROM PROFESSORS
WHERE PRO_ID = 'PRO4';


SELECT *
FROM view_admins;

COMMIT;
-- 커밋 완료

SELECT *
FROM ADMINS;

SELECT *
FROM ADMIN_AUTHORITY;

INSERT INTO ADMIN_AUTHORITY(AUTHO_NUM, AUTHO_NAME)
VALUES (1, '박종훈');

INSERT INTO ADMIN_AUTHORITY(AUTHO_NUM, AUTHO_NAME)
VALUES (2, '차영현');

COMMIT;

-- 데이터 추가 확인 
INSERT INTO ADMINS(ADMIN_ID,AUTHO_NUM, ADM_NAME, ADMIN_PW)
VALUES('ADMIN',1,'정은지','QWEASDZ');

INSERT INTO ADMINS(ADMIN_ID,AUTHO_NUM, ADM_NAME, ADMIN_PW)
VALUES('ADMIN2',2,'윤보미','1234567');

-- 로그인 확인
EXECUTE PRC_ADMIN_LOGIN('ADMIN','QWEASDZ');

-- 최종관리자 수정 확인 
UPDATE ADMIN_AUTHORITY
SET AUTHO_NUM = 3
WHERE AUTHO_NUM = 1;

DELETE 
FROM ADMIN_AUTHORITY
WHERE AUTHO_NUM = 2;

SELECT *
FROM ADMIN_AUTHORITY;

SELECT *
FROM ADMINS;

SELECT *
FROM PROFESSORS;

SELECT *
FROM SCORE;

ALTER TABLE PROFESSORS
ADD CONSTRAINT PRO_SSN_UK UNIQUE(PRO_SSN);
-- Table PROFESSORS이(가) 변경되었습니다.


-------------------------------------------------------------------------------
-- 관리자 로그인 
EXECUTE PRC_ADMIN_LOGIN('ADMIN2','1234567');

-- 교수 사전 등록 
EXECUTE PRC_PROFESSORS_REGISTRATION('ADMIN','QWEASDZ', '손흥민', 'PRO1', '525518-1234867');

SELECT *
FROM ADMINS;

SELECT *
FROM PROFESSORS;

SELECT *
FROM opening_subjects;
-- 과정 업데이트 및 삭제 

UPDATE opening_courses
SET OPEN_COU_CODE = 115
WHERE OPEN_COU_CODE = 1;

SELECT C.COU_CODE,OC.OPEN_COU_CODE
FROM COURSES C JOIN OPENING_COURSES OC
ON C.COU_CODE = OC.COU_CODE
JOIN COURSE_APPLICATION CA
ON CA.OPEN_COU_CODE = OC.OPEN_COU_CODE
JOIN OPENING_SUBJECTS OS
ON OS.OPEN_COU_CODE = OC.OPEN_COU_CODE;

SELECT *
FROM OPENING_COURSES;

SELECT *
FROM OPENING_SUBJECTS;

SELECT *
FROM SCORE;

SELECT *
FROM RETIRE_OUT_STUDENTS;

SELECT *
FROM BOOKS;

DELETE
FROM opening_courses
WHERE OPEN_COU_CODE = 9;

ROLLBACK;

COMMIT;


UPDATE opening_courses
SET COU_START_DATE = '2023-10-5'
WHERE OPEN_COU_CODE = 2;

SELECT *
FROM ROOMS;


INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0001','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0002','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0003','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0004','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0005','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0006','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0001','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0001','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0001','101호');
INSERT INTO ROOMS(ROOM_CODE, ROOM_NAME)
VALUES('R0001','101호');

ROLLBACK;

SELECT *
FROM STUDENTS;

SELECT *
FROM SCORE;